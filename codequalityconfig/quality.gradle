apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

/*
 * Copyright 2015 Vincent Brison.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Add checkstyle, findbugs, pmd and lint to the check task.
check.dependsOn 'checkstyle', 'findbugs', 'pmd', 'lint'

def configDir = "${project.rootDir}/codequalityconfig"
def reportsDir = "${project.buildDir}/reports"

checkstyle {
    toolVersion = '5.9'
    ignoreFailures = true
    configFile file("$configDir/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("$configDir/checkstyle/suppressions.xml").absolutePath
}

task checkstyle(type: Checkstyle) {
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '/test/'
    exclude '/androidTest/'
    exclude '/R.java'
    exclude '**/BuildConfig.java'
    classpath = files()
}

findbugs {
    toolVersion = "3.0.1"
}

//task findbugs(type: FindBugs, dependsOn: "assembleDebug") {
//    ignoreFailures = true
//    effort = "default"
//    reportLevel = "medium"
//    excludeFilter = new File("$configDir/findbugs/findbugs-filter.xml")
//    classes = files("${project.buildDir}/intermediates/classes")
//    classpath = files()
//    source 'src'
//    include '**/*.java'
//    exclude '**/gen/**'
//
//    reports {
//        xml.enabled = false
//        html.enabled = true
//        xml {
//            destination file("$reportsDir/findbugs/findbugs.xml")
//        }
//        html {
//            destination file("$reportsDir/findbugs/findbugs.html")
//        }
//    }
//}

task pmd(type: Pmd) {
    ignoreFailures = true
    ruleSetFiles = files("$configDir/pmd/pmd-ruleset.xml")
    ruleSets = ["java-android"]

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = false
        xml {
            destination file("$reportsDir/pmd/pmd.xml")
        }
        html {
            destination file("$reportsDir/pmd/pmd.html")
        }
    }
}

android {
    lintOptions {
        abortOnError false
        xmlReport true
        htmlReport true
        lintConfig file("$configDir/lint/lint.xml")
        htmlOutput file("$reportsDir/lint/lint-result.html")
        xmlOutput file("$reportsDir/lint/lint-result.xml")
    }
}

task detectInfer(type: Exec) {
    commandLine 'command'
    args = ['-v', 'infer']

    // Hide output if infer is present
    standardOutput new ByteArrayOutputStream()

    // Inform user if infer not present
    ignoreExitValue true
    doLast {
        if (execResult.getExitValue() != 0) {
            throw new GradleException("Infer seems not installed. Please refer to http://fbinfer.com/docs/getting-started.html")
        }
    }
}

task infer(type: Exec, dependsOn: [clean, detectInfer]) {
    workingDir "${project.rootDir}"
    commandLine 'infer'
    args = ['--', './gradlew', 'build']
}